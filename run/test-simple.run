#
# Check if USB_RAW_DEVICE is set for Qemu
#
#if {![info exists ::env(USB_RAW_DEVICE)] && [have_include power_on/qemu]} {
#        puts "\nPlease define USB_RAW_DEVICE environment variable and set it to your USB device <bus.device>\n"
#        exit 0
#}


#
# Build
#
set build_components {
	core init
	drivers/timer
	drivers/usb
	server/usb_terminal
	server/servo_controller
	test/simple
}

source ${genode_dir}/repos/base/run/platform_drv.inc
append_platform_drv_build_components

build $build_components

create_boot_directory

#
# Generate config
#

append config {
<config>
	<parent-provides>
		<service name="ROM"/>
		<service name="RAM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="CAP"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
		<service name="SIGNAL" />
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>
	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Timer"/></provides>
	</start>
	<start name="usb_drv">
		<resource name="RAM" quantum="7M"/>
		<provides><service name="Usb"/></provides>
		<config uhci="yes" ehci="yes" xhci="yes">
			<raw/>
		</config>
	</start>
	<start name="usb_terminal">
		<resource name="RAM" quantum="2M"/>
		<provides><service name="Terminal"/></provides>
	</start>
	<start name="servo_controller">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Servo Controller"/></provides>
	</start>
	<start name="test_simple">
		<resource name="RAM" quantum="1M"/>
	</start>}

append_platform_drv_config

append config {
  </config>}

install_config $config

#
# Boot modules
#

# generic modules
set boot_modules {
	core init timer usb_drv usb_terminal
	servo_controller test_simple
}

append_platform_drv_boot_modules

build_boot_image $boot_modules

append qemu_args " -m 256 -usb -usbdevice host:067b:2303 -nographic"
append qemu_args " -monitor telnet:127.0.0.1:1234,server,nowait"

run_genode_until forever
